---
title:  Ruby - Basics
category: basics
filter:
  - erb
  - textile
---


p(sidenote). Interactive Ruby Shell

To show off the basics of ruby you can jump straight into the ruby console. Do so by opening terminal (or the console2 program we installed earlier if you're on a PC) and typing:

@irb@

You can then run ruby code right in terminal (or console2). You can copy in multiple lines at a time, try out some of the examples below.

h2. Methods

h3. Without arguments

p(sidenote). Parenthesis are often optional.

<% coderay(:lang => "ruby") do -%>
def hello_world
  print "Hello "
  puts("World!")
end
hello_world
#=> Hello World!
hello_world()
#=> Hello World!
<% end -%>

@print@ and @puts@ are similar - the latter adds an new-line character.

h3. With arguments

p(sidenote). Use lowercase_and_underscores for variables and methods.

<% coderay(:lang => "ruby") do -%>
def hello_world(name)
  puts "Hello #{name}!"
end
hello_world("World")
#=> Hello World!
<% end -%>

h3. With default arguments

<% coderay(:lang => "ruby") do -%>
def hello_world(name = "World")
  puts "Hello #{name.capitalize}!"
end
hello_world "odin"
#=> Hello Odin!
hello_world
#=> Hello World!
<% end -%>


h2. Classes

h3. Class definition

p(sidenote). Class names must be in CamelCase

<% coderay(:lang => "ruby") do -%>
class GreetWorld
  def initialize(name = "World")
    @name = name
  end
  def say_hi
    puts "Hi #{@name}!"
  end
  def say_bye
    puts "Bye #{@name}, come back soon."
  end
end
<% end -%>

h3. Creating objects (Instantiation)

<% coderay(:lang => "ruby") do -%>
g = Greeter.new("Pat")
#=> #<Greeter:0x16cac @name="Pat">
g.say_hi
#=>Hi Pat!
g.say_bye
#=>Bye Pat, come back soon.
<% end -%>


h2. if, elsif, else statement

p(sidenote). These logic statements are very similar in most programming languages

<% coderay(:lang => "ruby") do -%>
rails = "good"
if rails == "awesome"
  print "Rails is awesome!"
elsif rails == "really awesome!"
  print "Rails is really awesome!"
else
  print "Rails isn't awesome"
end
<% end -%>

h2. Strings


h3. Instant array of strings

<% coderay(:lang => "ruby") do -%>
p %w[ Bob Jim Joe ]
#=> ["Bob", "Jim", "Joe"]
<% end -%>

h3. Types of strings

p(sidenote). Interpolation is wonderful.

@'single quote'@ and @"double quote"@ are both normal strings. Double quotes allow interpolation of arbitrary ruby within the string:

<% coderay(:lang => "ruby") do -%>
quote = "This is a quote"
puts 'single quote: #{quote}'
#=> 'single quote: #{quote}'
puts "double quote: #{quote}"
#=> double quote: This is a quote

puts "1 + 1 = #{1 + 1}"
#=> 1 + 1 = 2
<% end -%>

h3. Multi-line strings

Want a block of text?

<% coderay(:lang => "ruby") do -%>
puts <<-STRING
This is a mulit-
  line string.
STRING
#=> This is a mulit-
#=>   line string.
<% end -%>

The @STRING@ can be anything but must be the same at start and end.

h2. Regular expressions

A language within a language, regular expressions are powerful for processing text.

You can use @(groups)@ and they are populated into @$1@, @$2@, etc variables.

<% coderay(:lang => "ruby") do -%>
time_str = Time.now.to_s
puts time_str
#=> Thu Apr 08 16:05:34 +1000 2010
if time_str =~ /(\d+):(\d+):(\d+)/
  p [$1, $2, $3]
end
#=> ["16", "08", "45"]
<% end -%>

h3. Replacement with gsub

<% coderay(:lang => "ruby") do -%>
"I am a happy man in a can!".gsub(/an/, 'aaaaan')
#=> "I am a happy maaaaan in a caaaaan!"
<% end -%>

h3. Ternary operator

<% coderay(:lang => "ruby") do -%>
time_str = Time.now.to_s
(time_str =~ /Mon/) ? "I hate Monday!" : "Great!"
#=> Great!
<% end -%>

h2. Loops

<% coderay(:lang => "ruby") do -%>
for person in ["Dr Nic", "Jack", "Odin"]
  puts person
end

count = 5
while count > 0
  count -= 1
  puts count
end
<% end -%>

h2. Blocks

Pass some code when calling a method.

<% coderay(:lang => "ruby") do -%>
5.times do
  puts "Blocks are powerful"
end
<% end -%>

Your block of code can have arguments.

<% coderay(:lang => "ruby") do -%>
0.upto(5) do |i|
  puts i
end

5.times do |i|
  puts "Blocks are powerful x #{i}"
end
<% end -%>

h3. Better loops

<% coderay(:lang => "ruby") do -%>
%w[ Bob Jim Joe ].each do |name|
  puts name
end
<% end -%>

h3. Blocks with { }

@{ ... }@ and @do ...  end@ are interchangeable.

p(sidenote). Typically, use the former for 1-liners.

<% coderay(:lang => "ruby") do -%>
0.times(5) { |i| puts i }

0.times(5) do |i|
  puts i
end
<% end -%>


h3. Methods accepting blocks

The @yield@ method invokes any block passed to the method; pass arguments as necessary.

<% coderay(:lang => "ruby") do -%>
def this_many_times(num)
  num.times do |counter|
    yield(counter)
  end
end

this_many_times(3) do |i|
  puts "Block called # #{i}"
end
#=> Block called # 0
#=> Block called # 1
#=> Block called # 2
<% end -%>


Test if a block is provided with @block_given?@

<% coderay(:lang => "ruby") do -%>
  def this_many_times(num)
    if block_given?
      num.times do |counter|
        yield(counter)
      end
    else
      puts "No block passed!"
    end
  end
  this_many_times(5) {|i| print i}
  #=> 01234
  this_many_times(5)
  #=> No block passed!
<% end -%>


h2. Got 15 minutes?

h3. Try Ruby in your browser

If you want to run through a basic ruby tutorial head over to "tryruby.org":http://tryruby.org/ and try out ruby in your web browser!